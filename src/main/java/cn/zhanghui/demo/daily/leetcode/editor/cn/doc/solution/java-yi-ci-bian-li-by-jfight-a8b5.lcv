> Problem: [3. 无重复字符的最长子串](https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/)

[TOC]

# 思路

> * arr[x] 表示x对应字符上次出现的位置
> * 遍历字符串i为终点，c为起点,保证中间没有重复的
> * 如果遇到重复字符后，将c更新为该字符上次出现的位置，更新时要保证c只能变大
> * `i-c+1`更新最大值

# 复杂度

- 时间复杂度:

> $O(s.length)$

# Code

* []

```Java

class Solution {
    public int lengthOfLongestSubstring(String s) {
       int ans = 0;
		int[] arr = new int[130];
		// c为最后一次出现重复数的下标+1
		int c = 0;
		for (int i = 0; i < s.length(); i++) {
            // c < arr[s.charAt(i)]保证c只能增大
			if(arr[s.charAt(i)]!=0 && c < arr[s.charAt(i)]) c = arr[s.charAt(i)];
			arr[s.charAt(i)] = i+1;
			ans = Math.max(ans, i - c+1);
		}
		return ans;
    }
}
```

