class Solution {
    public int strStr(String haystack, String needle) {
        int pLen = needle.length();
        int tLen = haystack.length();

        if(pLen == 0) {
            return 0;
        }

        if(tLen < pLen){
            return  -1;
        }

        int i = 0, j = 0, k = 0;

        int[] nextIndexs = get_nextIndex(needle);

        while(k <= (tLen - pLen)){
            if(haystack.charAt(i) == needle.charAt(j)){
                if(++j == pLen){
                    return k;
                }
                i++;
            }else {
                if(j != 0){
                    k = k + (j - nextIndexs[j]);
                }else{
                    k = k +1;
                }
                i = k;
                j = 0;
            }
        }
        return -1;
    }

        private static int[] get_nextIndex(String pattern){
        char[] pChars = pattern.toCharArray();

        int i = 1, j = 0,pLen = pChars.length;
        
        if(pLen < 2){
            return new int[]{};
        }
        int[] nextIndexs = new int[pLen];

        nextIndexs[1] = 0;

        while(i + 1 < pLen){
            if(j ==0 || pChars[i] == pChars[j]) {
                if(pChars[i+1] == pChars[j+1]){
                    nextIndexs[++i] = nextIndexs[++j];
                }else {
                    nextIndexs[++i] = ++j;
                }
            }else{
                j = nextIndexs[j];
            }
        }
        return nextIndexs;
    }
}
//runtime:4 ms
//memory:39.1 MB
