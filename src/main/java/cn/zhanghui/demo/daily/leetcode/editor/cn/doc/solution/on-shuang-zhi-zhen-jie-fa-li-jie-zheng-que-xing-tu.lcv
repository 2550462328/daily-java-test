#### 解题思路：

这道题目看似简单，做起来才发现不容易。分治法、动态规划都用不上，要想得到 $O(n)$ 的解法只有使用双指针一条路。即使看了答案知道了双指针解法，你也可能并不清楚这个解法为什么正确。为什么双指针往中间移动时，不会漏掉某些情况呢？

如果没有真正理解题目，即使一次对着答案做出来了，再次遇到这个题目，还是可能做不出来。要理解这道题的正确性和原理，需要从背后的 **缩减搜索空间** 的思想去考虑题解。下面我将用图片解释这道题的正确性和原理。

#### 双指针解法的正确性

首先放上双指针解法的代码：

* []

```C++
int maxArea(vector<int>& height) {
    int res = 0;
    int i = 0;
    int j = height.size() - 1;
    while (i < j) {
        int area = (j - i) * min(height[i], height[j]);
        res = max(res, area);
        if (height[i] < height[j]) {
            i++;
        } else {
            j--;
        }
    }
    return res;
}
```

* []

```Java
public int maxArea(int[] height) {
    int res = 0;
    int i = 0;
    int j = height.length - 1;
    while (i < j) {
        int area = (j - i) * Math.min(height[i], height[j]);
        res = Math.max(res, area);
        if (height[i] < height[j]) {
            i++;
        } else {
            j--;
        }
    }
    return res;
}
```

用一句话概括双指针解法的要点：**指针每一次移动，都意味着排除掉了一个柱子**。

如下图所示，在一开始，我们考虑相距最远的两个柱子所能容纳水的面积。水的宽度是两根柱子之间的距离 $d = 8$；水的高度取决于两根柱子之间较短的那个，即左边柱子的高度 $h = 3$。水的面积就是 $3 \times 8 = 24$。

![initial-state](https://pic.leetcode-cn.com/9341a245384b77afda31ed8b4040d7a382be107a2d22c0e1fc2652a21707cf8c.jpg)

如果选择固定一根柱子，另外一根变化，水的面积会有什么变化吗？稍加思考可得：

+ 当前柱子是最两侧的柱子，水的宽度 $d$ 为最大，其他的组合，水的宽度都比这个小。
+ 左边柱子较短，决定了水的高度为 `3`。如果移动左边的柱子，新的水面高度不确定，一定不会超过右边的柱子高度 7。
+ 如果移动右边的柱子，新的水面高度一定不会超过左边的柱子高度 `3`，也就是不会超过现在的水面高度。

![move-right](https://pic.leetcode-cn.com/2bce7d990e22f03d74cc1c566023f18f6f739a559d14b01cee154b67b2ae781b.jpg)

由此可见，如果固定左边的柱子，移动右边的柱子，那么水的高度一定不会增加，且宽度一定减少，所以水的面积一定减少。这个时候，左边的柱子和任意一个其他柱子的组合，其实都可以排除了。也就是我们可以排除掉左边的柱子了。

这个排除掉左边柱子的操作，就是双指针代码里的 `i++`。`i` 和 `j` 两个指针中间的区域都是还未排除掉的区域。随着不断的排除，`i` 和 `j` 都会往中间移动。当 `i` 和 `j` 相遇，算法就结束了。

#### 图解双指针解法的原理

下面我们用更直观的方法来看看`“排除掉一根柱子”、“指针移动”`究竟代表着什么。

在这道题中，假设一共有 $n$ 根柱子，编号 $0, 1, \dots, n-1$，高度分别为 $H_0, H_1, \dots, H_{n-1}$。我们要寻找的是两根柱子 $i, j$，它们需要满足的约束条件是：

+ $i$、$j$ 都是合法的柱子下标，即 $0 \le i < n, 0 \le j < n$
+ $i$ 在 $j$ 的左边，即 $i < j$

而我们希望从中找到容纳水面积最大的柱子 $(i, j)$。以 $n = 8$ 为例，这时候全部的搜索空间是：

![search-space](https://pic.leetcode-cn.com/bbca2fea8e093fef61ecfe822e2668646a24f8bbc7a7a8f10eb0428ead6b1893.jpg)

由于 $i$、$j$ 的约束条件的限制，搜索空间是白色的倒三角部分。可以看到，搜索空间的大小是 $O(n^2)$ 数量级的。如果用暴力解法求解，一次只检查一个单元格，那么时间复杂度一定是 $O(n^2)$。要想得到 $O(n)$ 的解法，我们就需要能够一次排除多个单元格。那么我们来看看，本题的双指针解法是如何削减搜索空间的：

一开始，我们检查右上方单元格 $(0, 7)$，即考虑最左边的 $0$ 号柱子和最右边的 $7$ 号柱子，计算它们之间容纳水的面积。然后我们比较一下两根柱子的高度，关注其中较短的一根。

![check-0-7](https://pic.leetcode-cn.com/6237e665691939c321d2e0362b46af86c65a26f2da358ee441a96a4928270597.jpg)

假设左边的 $0$ 号柱子较短。根据刚才的推理，$0$ 号柱子目前的水面高度已经到了上限。由于 $7$ 号柱子已经是离 $0$ 号柱子最远的了，水的宽度也最大，如果换其他的柱子和 $0$ 号柱子配对，水的宽度只会更小，高度也不会增加，容纳水的面积只会更小。也就是说，$0$ 号柱子和 $6, 5, \dots, 1$ 号柱子的配对都可以排除掉了。记录了 $(0, 7)$ 这组柱子的结果之后，就可以排除 $0$ 号柱子了。这相当于 $i=0$ 的情况全部被排除。对应于双指针解法的代码，就是 `i++`；对应于搜索空间，就是削减了一行的搜索空间，如下图所示。

![remove-i-0](https://pic.leetcode-cn.com/6196f179edd049fd38dcbc2a6301c055d83f253863777d7e76d5061fe35abab0.jpg)

排除掉了搜索空间中的一行之后，我们再看剩余的搜索空间，仍然是倒三角形状。我们检查右上方的单元格 $(1, 7)$，即考虑 $1$ 号柱子和 $7$ 号柱子，计算它们之间容纳水的面积。然后，比较两根柱子的高度。

![check-1-7](https://pic.leetcode-cn.com/ca441e528ec9ece8f38f7c213633e3d871da8e8c3083740ce06723c97329c02f.jpg)

假设此时 $7$ 号柱子较短。同理， $7$ 号柱子已经是离 $1$ 号柱子最远的了，如果换其他的柱子和 $1$ 号柱子配对，水的宽度变小，高度也不会增加，容纳水的面积只会更小。也就是说，$7$ 号柱子和 $2, 3, \dots, 6$ 号柱子的配对都可以排除掉了。记录了 $(1, 7)$ 这组柱子的结果之后，就可以排除 $7$ 号柱子了。这相当于 $j=7$ 的情况全部被排除。对应于双指针解法的代码，就是 `j--`；对应于搜索空间，就是削减了一列的搜索空间，如下图所示。

![remove-j-7](https://pic.leetcode-cn.com/5dad5576ae8bf50f0288eb690f8bade47967b1cc6754175db777369aac8a6c11.jpg)

可以看到，无论柱子 $i$ 和 $j$ 哪根更长，我们都可以排除掉一行或者一列的搜索空间。经过 $n$ 步以后，就能排除所有的搜索空间，检查完所有的可能性。搜索空间的减小过程如下面动图所示：

![search-space-shrink](https://pic.leetcode-cn.com/48fa92510ccbc963d7e49da6a2d7302ebf42233345522a42df435df18bc42fa4.gif)

实际上还有几道题也是用到了这样的 **缩减搜索空间**的 思想：

+ [167. 两数之和 II - 输入有序数组](https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/)
+ [240. 搜索二维矩阵 II](https://leetcode-cn.com/problems/search-a-2d-matrix-ii/)

