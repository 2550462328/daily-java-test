### 解法思路

- 这是个排列组合问题对吧？这个排列组合可以用树的形式表示出来；
- 当给定了输入字符串，比如："23"，那么整棵树就构建完成了，如下：

&emsp;&emsp;&emsp;&emsp;![算法过程.png](https://pic.leetcode-cn.com/38567dcbb6401d88946ca974aacffb5ab27cb1ad54056f02b59016c0cc68b40f-file_1562774451350)

- 问题转化成了从根节点到空节点一共有多少条路径；

### 解法实现

###### 时间复杂度

- $O(2^len(s))$；
- 这是个指数级的算法，很慢，家用计算机最多处理 `len(s) = 20` 的量级；

###### 空间复杂度

- $O(len(s))$；

###### 关键字

`排列组合` `树` `递归` `递归带货`

###### 实现细节

- 在递归的外面有个货仓  `res `，用来装递归过程中找到的结果；

### 代码

* [-Java]

```Java
package leetcode._17;

import java.util.ArrayList;
import java.util.List;

public class Solution17_1 {

    private String letterMap[] = {
            " ",    //0
            "",     //1
            "abc",  //2
            "def",  //3
            "ghi",  //4
            "jkl",  //5
            "mno",  //6
            "pqrs", //7
            "tuv",  //8
            "wxyz"  //9
    };

    private ArrayList<String> res;

    public List<String> letterCombinations(String digits) {

        res = new ArrayList<String>();
        if(digits.equals(""))
            return res;

        findCombination(digits, 0, "");
        return res;
    }

    private void findCombination(String digits, int index, String s){

        if(index == digits.length()){
            res.add(s);
            return;
        }

        Character c = digits.charAt(index);
        String letters = letterMap[c - '0'];
        for(int i = 0 ; i < letters.length() ; i ++){
            findCombination(digits, index+1, s + letters.charAt(i));
        }

        return;
    }

}
```

